import { renderHeadToString } from '@vueuse/head';
import { renderToString, SSRContext } from '@vue/server-renderer';
import { RenderParameters } from './types';

export async function render({ url, context, manifest }: RenderParameters) {
  // set the router to the desired URL before rendering
  context.router.push(url);
  await context.router.isReady();

  // passing SSR context object which will be available via useSSRContext()
  // @vitejs/plugin-vue injects code into a component's setup() that registers
  // itself on ctx.modules. After the render, ctx.modules would contain all the
  // components that have been instantiated during this render call.
  const ctx: SSRContext = {};
  const appHtml = await renderToString(context.app, ctx);

  // the SSR manifest generated by Vite contains module -> chunk/asset mapping
  // which we can then use to determine what files need to be preloaded for this
  // request.
  const preloadLinks = renderPreloadLinks(ctx.modules, manifest);

  const { headTags, htmlAttrs, bodyAttrs } = renderHeadToString(context.head);

  return {
    appHtml,
    preloadLinks,
    headTags,
    htmlAttrs,
    bodyAttrs
  };
}

function renderPreloadLinks(modules, manifest) {
  let links = ''
  const seen = new Set()
  modules.forEach((id) => {
    const files = manifest[id]
    if (files) {
      files.forEach((file) => {
        if (!seen.has(file)) {
          seen.add(file)
          links += renderPreloadLink(file)
        }
      })
    }
  })
  return links
}

function renderPreloadLink(file) {
  if (file.endsWith('.js')) {
    return `<link rel="modulepreload" crossorigin href="${file}">`
  } else if (file.endsWith('.css')) {
    return `<link rel="stylesheet" href="${file}">`
  } else if (file.endsWith('.woff')) {
    return ` <link rel="preload" href="${file}" as="font" type="font/woff" crossorigin>`
  } else if (file.endsWith('.woff2')) {
    return ` <link rel="preload" href="${file}" as="font" type="font/woff2" crossorigin>`
  } else if (file.endsWith('.gif')) {
    return ` <link rel="preload" href="${file}" as="image" type="image/gif" crossorigin>`
  } else if (file.endsWith('.jpg')) {
    return ` <link rel="preload" href="${file}" as="image" type="image/jpeg" crossorigin>`
  } else if (file.endsWith('.jpeg')) {
    return ` <link rel="preload" href="${file}" as="image" type="image/jpeg" crossorigin>`
  } else if (file.endsWith('.png')) {
    return ` <link rel="preload" href="${file}" as="image" type="image/png" crossorigin>`
  } else {
    // TODO
    return ''
  }
}

